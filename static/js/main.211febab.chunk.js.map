{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["providerOptions","walletconnect","package","WalletConnectProvider","options","network","App","bn","useState","undefined","signedProvider","setSignedProvider","rpcProvider","setRpcProvider","tokenContract","setTokenContract","data","setData","web3Modal","setWeb3Modal","provider","a","contract","ethers","Contract","tokenJSON","address","abi","console","log","connect","p","s","providers","Web3Provider","listAccounts","accounts","_web3Modal","Web3Modal","cacheProvider","ethersProvider","JsonRpcProvider","totalSupply","supply","utils","formatUnits","toString","prevData","getBalance","ethBalance","oneCoinTreasuryBalance","myEthBalance","balanceOf","myONEBalance","useEffect","getWeb3Modal","connectProvider","cachedSignerName","JSON","parse","localStorage","getItem","cachedSignerExists","connectSigner","getContract","getPublicBalances","getTokenInfo","getUserBalances","className","src","alt","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","onClick","e","window","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.211febab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n//import useWeb3Modal from './hooks/useWeb3Modal.js';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport React, {useState, useEffect } from 'react';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport tokenJSON from './Token.json';\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      97: 'https://data-seed-prebsc-1-s1.binance.org:8545/'\n    },\n    network: 'binance_testnet',\n  }\n};\n\nfunction App() {\n  const [signedProvider, setSignedProvider] = useState(undefined);\n  const [rpcProvider, setRpcProvider] = useState(undefined);\n  const [tokenContract, setTokenContract] = useState(undefined);\n  const [data, setData] = useState({});\n  const [web3Modal, setWeb3Modal] = useState(undefined);\n \n  async function disconnectSigner() {\n    setSignedProvider(undefined);\n    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n  }\n\n  async function getContract(provider) {\n    if (tokenContract) return;\n    let contract = new ethers.Contract(tokenJSON.address, tokenJSON.abi, provider);\n    setTokenContract(contract);\n  }\n\n  function cachedSignerExists() {\n    // Get the cached provider from LocalStorage\n    const cachedSignerName = JSON.parse(localStorage.getItem(\"WEB3_CONNECT_CACHED_PROVIDER\"));\n    \n    console.log(\"Cached signedProvider exists? %s\", cachedSignerName != undefined)\n    // Get the connector for the cachedProviderName\n    return cachedSignerName != undefined;\n}\n\nasync function connectSigner() {\n      console.log(\"connecting to signedProvider\");\n      let p = await web3Modal.connect();\n      let s =  new ethers.providers.Web3Provider(p);\n      let accounts = await s.listAccounts();\n      console.log(accounts);\n      setSignedProvider(s);\n}\n\nasync function getWeb3Modal() {\n  const _web3Modal = new Web3Modal({\n    cacheProvider: true, // optional\n    providerOptions // required\n  });\n  setWeb3Modal(_web3Modal);\n}\n\n  useEffect(() => {\n    if (!web3Modal) getWeb3Modal();\n\n    if (!rpcProvider) connectProvider();\n    if (!signedProvider && web3Modal && cachedSignerExists()) {\n      connectSigner();\n    }\n\n    if (rpcProvider) {\n      getContract(rpcProvider);\n      getPublicBalances();\n      getTokenInfo();\n      if (signedProvider) {\n        getUserBalances();\n      }\n    }\n  }, [rpcProvider, tokenContract, signedProvider]);\n\n  async function connectProvider() {\n    console.log(\"connecting to rpcProvider\");\n    let ethersProvider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');\n    setRpcProvider(ethersProvider);\n  }\n\n  async function getTokenInfo() {\n    let supply = await tokenContract.totalSupply();\n    \n    console.log(ethers.utils.formatUnits(supply).toString());\n    //const newData = {...data, totalSupply: supply};\n\n    setData(prevData => ({...prevData, totalSupply:supply, tokenContract:tokenContract}));\n  }\n\n  async function getPublicBalances() {\n    console.log(\"getting public balances\");\n    const ethBalance = await rpcProvider.getBalance('0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266');\n    const oneCoinTreasuryBalance = await rpcProvider.getBalance(tokenJSON.address);\n    setData(prevData => ({...prevData, \n      ethBalance: ethBalance,\n      oneCoinTreasuryBalance: oneCoinTreasuryBalance}));\n  }\n\n  async function getUserBalances() {\n    console.log(\"getting user balances\");\n    let accounts = await signedProvider.listAccounts();\n    const myEthBalance = await signedProvider.getBalance(accounts[0]);\n    const myONEBalance = await tokenContract.balanceOf(accounts[0]);\n    setData(prevData => ({...prevData,    \n      myEthBalance: myEthBalance, \n      myONEBalance: myONEBalance,\n    }));\n  }\n\n  function formatEth(bn) {\n    return parseFloat(ethers.utils.formatUnits(bn).toString()).toLocaleString('en-US',{minimumFractionDigits:0,maximumFractionDigits:0});\n  }\n\n  async function mint(num) {\n    console.log(\"mint here. %s tokens\", num);\n    let tokenContractWithSigner = await tokenContract.connect(signedProvider.getSigner());\n\n    let tx = await tokenContractWithSigner.buyCoins({value: ethers.utils.parseEther(num.toString())});\n    let receipt = await tx.wait();\n    console.log(receipt);\n  }\n\n  function mintButton() {\n    return signedProvider ? (\n      <button\n        className='btn-gradient-border btn'\n        onClick ={() => {\n          mint(.001); \n        }}\n          >\n          Mint 1 ETH worth of OneCoin\n      </button>\n    ) : null;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src='onecoin.png' className=\"App-logo\" alt=\"logo\" />\n        <h1 className='text-gradient'>Welcome to OneCoin</h1>\n        <p>\n          OneCoin is an experiment. We start with > 1B coins in circulation, and coins halve every day until there's just One Coin left.\n        </p>\n        \n        <p>\n          Total Supply: {data.totalSupply != null ? formatEth(data.totalSupply) : 'loading'} OneCoin\n        </p>\n        <button className=\"btn btn-gradient-border\"\n          onClick={(e) => window.open('https://poocoin.app/tokens/0x3498182df09cf0fbff462a7495b4503cee2594e9', '_blank')} > \n          See the Price\n        </button>\n        <button \n          className=\"btn btn-gradient-border\"\n          onClick={(e) => window.open('https://pancakeswap.finance/swap?outputCurrency=0x3498182dF09Cf0FbFf462a7495B4503cEe2594E9', '_blank')}>\n            Invest in ONE\n        </button>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}