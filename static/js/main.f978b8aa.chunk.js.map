{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["providerOptions","walletconnect","package","WalletConnectProvider","options","network","App","useState","undefined","signedProvider","setSignedProvider","rpcProvider","setRpcProvider","tokenContract","setTokenContract","data","setData","web3Modal","setWeb3Modal","a","localStorage","removeItem","provider","contract","ethers","Contract","tokenJSON","address","abi","connectSigner","console","log","connect","p","s","providers","Web3Provider","listAccounts","accounts","_web3Modal","Web3Modal","cacheProvider","ethersProvider","JsonRpcProvider","totalSupply","supply","utils","formatUnits","toString","prevData","getBalance","ethBalance","oneCoinTreasuryBalance","myEthBalance","balanceOf","myONEBalance","formatEth","bn","parseFloat","toFixed","num","getSigner","tokenContractWithSigner","buyCoins","value","parseEther","tx","wait","receipt","useEffect","getWeb3Modal","connectProvider","cachedSignerName","JSON","parse","getItem","cachedSignerExists","getContract","getPublicBalances","getUserBalances","getTokenInfo","className","src","logo","alt","onClick","mint","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f978b8aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n//import useWeb3Modal from './hooks/useWeb3Modal.js';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport React, {useState, useEffect } from 'react';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport tokenJSON from './Token.json';\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      97: 'https://data-seed-prebsc-1-s1.binance.org:8545/'\n    },\n    network: 'binance_testnet',\n  }\n};\n\nfunction App() {\n  const [signedProvider, setSignedProvider] = useState(undefined);\n  const [rpcProvider, setRpcProvider] = useState(undefined);\n  const [tokenContract, setTokenContract] = useState(undefined);\n  const [data, setData] = useState({});\n  const [web3Modal, setWeb3Modal] = useState(undefined);\n \n  async function disconnectSigner() {\n    setSignedProvider(undefined);\n    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n  }\n\n  async function getContract(provider) {\n    if (tokenContract) return;\n    let contract = new ethers.Contract(tokenJSON.address, tokenJSON.abi, provider);\n    setTokenContract(contract);\n  }\n\n  function cachedSignerExists() {\n    // Get the cached provider from LocalStorage\n    const cachedSignerName = JSON.parse(localStorage.getItem(\"WEB3_CONNECT_CACHED_PROVIDER\"));\n    \n    console.log(\"Cached signedProvider exists? %s\", cachedSignerName != undefined)\n    // Get the connector for the cachedProviderName\n    return cachedSignerName != undefined;\n}\n\nasync function connectSigner() {\n      console.log(\"connecting to signedProvider\");\n      let p = await web3Modal.connect();\n      let s =  new ethers.providers.Web3Provider(p);\n      let accounts = await s.listAccounts();\n      console.log(accounts);\n      setSignedProvider(s);\n}\n\nasync function getWeb3Modal() {\n  const _web3Modal = new Web3Modal({\n    cacheProvider: true, // optional\n    providerOptions // required\n  });\n  setWeb3Modal(_web3Modal);\n}\n\n  useEffect(() => {\n    if (!web3Modal) getWeb3Modal();\n\n    if (!rpcProvider) connectProvider();\n    if (!signedProvider && web3Modal && cachedSignerExists()) {\n      connectSigner();\n    }\n\n    if (rpcProvider) {\n      getContract(rpcProvider);\n      getPublicBalances();\n      if (signedProvider) {\n        getUserBalances();\n        getTokenInfo();\n      }\n    }\n  }, [rpcProvider, tokenContract, signedProvider]);\n\n  async function connectProvider() {\n    console.log(\"connecting to rpcProvider\");\n    let ethersProvider = new ethers.providers.JsonRpcProvider('https://data-seed-prebsc-1-s1.binance.org:8545/');\n    setRpcProvider(ethersProvider);\n  }\n\n  async function getTokenInfo() {\n    let supply = await tokenContract.totalSupply();\n    \n    console.log(ethers.utils.formatUnits(supply).toString());\n    //const newData = {...data, totalSupply: supply};\n\n    setData(prevData => ({...prevData, totalSupply:supply, tokenContract:tokenContract}));\n  }\n\n  async function getPublicBalances() {\n    console.log(\"getting public balances\");\n    const ethBalance = await rpcProvider.getBalance('0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266');\n    const oneCoinTreasuryBalance = await rpcProvider.getBalance(tokenJSON.address);\n    setData(prevData => ({...prevData, \n      ethBalance: ethBalance,\n      oneCoinTreasuryBalance: oneCoinTreasuryBalance}));\n  }\n\n  async function getUserBalances() {\n    console.log(\"getting user balances\");\n    let accounts = await signedProvider.listAccounts();\n    const myEthBalance = await signedProvider.getBalance(accounts[0]);\n    const myONEBalance = await tokenContract.balanceOf(accounts[0]);\n    setData(prevData => ({...prevData,    \n      myEthBalance: myEthBalance, \n      myONEBalance: myONEBalance,\n    }));\n  }\n\n  function formatEth(bn) {\n    return parseFloat(ethers.utils.formatUnits(bn).toString()).toFixed(4);\n  }\n\n  async function mint(num) {\n    console.log(\"mint here. %s tokens\", num);\n    let tokenContractWithSigner = await tokenContract.connect(signedProvider.getSigner());\n\n    let tx = await tokenContractWithSigner.buyCoins({value: ethers.utils.parseEther(num.toString())});\n    let receipt = await tx.wait();\n    console.log(receipt);\n  }\n\n  function mintButton() {\n    return signedProvider ? (\n      <button\n        className='btn-gradient-border btn'\n        onClick ={() => {\n          mint(.001); \n        }}\n          >\n          Mint 1 ETH worth of OneCoin\n      </button>\n    ) : null;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Total Supply: {data.totalSupply != null ? formatEth(data.totalSupply) : 'loading'} OneCoin\n        </p>\n        <p>\n          OneCoin Treasury Balance: {data.oneCoinTreasuryBalance != null ? formatEth(data.oneCoinTreasuryBalance) : 'loading'} ETH\n        </p>\n        <p>\n          My Balances: <p />\n          Someone's eth balance: {data.ethBalance != null ? formatEth(data.ethBalance) : 'loading'} ETH<p />\n          {data.myEthBalance != null ? formatEth(data.myEthBalance) : 'loading'} ETH<p />\n          {data.myONEBalance != null ? formatEth(data.myONEBalance) : 'loading'} ONE\n        </p>\n        <button\n          className='btn-gradient-border btn'\n          onClick ={!signedProvider ? connectSigner : disconnectSigner} >\n        {!signedProvider ? 'Connect' : 'Disconnect' }\n        </button>\n        {mintButton()}\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}