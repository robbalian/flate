{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["providerOptions","walletconnect","package","WalletConnectProvider","options","network","App","bn","useState","undefined","signedProvider","rpcProvider","setRpcProvider","tokenContract","setTokenContract","data","setData","web3Modal","setWeb3Modal","provider","a","contract","ethers","Contract","tokenJSON","address","abi","_web3Modal","Web3Modal","cacheProvider","console","log","ethersProvider","providers","JsonRpcProvider","totalSupply","supply","utils","formatUnits","toString","prevData","getBalance","ethBalance","oneCoinTreasuryBalance","useEffect","getWeb3Modal","connectProvider","cachedSignerName","JSON","parse","localStorage","getItem","cachedSignerExists","getTokenInfo","getContract","getPublicBalances","className","src","process","alt","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","onClick","e","window","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d42fb20b.chunk.js","sourcesContent":["//import logo from '/flatecoin.png';\nimport './App.css';\n//import useWeb3Modal from './hooks/useWeb3Modal.js';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport React, {useState, useEffect } from 'react';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport tokenJSON from './Token.json';\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      97: 'https://data-seed-prebsc-1-s1.binance.org:8545/'\n    },\n    network: 'binance_testnet',\n  }\n};\n\nfunction App() {\n  const [signedProvider, setSignedProvider] = useState(undefined);\n  const [rpcProvider, setRpcProvider] = useState(undefined);\n  const [tokenContract, setTokenContract] = useState(undefined);\n  const [data, setData] = useState({});\n  const [web3Modal, setWeb3Modal] = useState(undefined);\n \n  async function disconnectSigner() {\n    setSignedProvider(undefined);\n    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n  }\n\n  async function getContract(provider) {\n    if (tokenContract) return;\n    let contract = new ethers.Contract(tokenJSON.address, tokenJSON.abi, provider);\n    setTokenContract(contract);\n  }\n\n  function cachedSignerExists() {\n    // Get the cached provider from LocalStorage\n    const cachedSignerName = JSON.parse(localStorage.getItem(\"WEB3_CONNECT_CACHED_PROVIDER\"));\n    \n    console.log(\"Cached signedProvider exists? %s\", cachedSignerName != undefined)\n    // Get the connector for the cachedProviderName\n    return cachedSignerName != undefined;\n}\n\nasync function connectSigner() {\n      console.log(\"connecting to signedProvider\");\n      let p = await web3Modal.connect();\n      let s =  new ethers.providers.Web3Provider(p);\n      let accounts = await s.listAccounts();\n      console.log(accounts);\n      setSignedProvider(s);\n}\n\nasync function getWeb3Modal() {\n  const _web3Modal = new Web3Modal({\n    cacheProvider: true, // optional\n    providerOptions // required\n  });\n  setWeb3Modal(_web3Modal);\n}\n\n  useEffect(() => {\n    if (!web3Modal) getWeb3Modal();\n\n    if (!rpcProvider) connectProvider();\n    if (!signedProvider && web3Modal && cachedSignerExists()) {\n      //connectSigner();\n    }\n\n    if (tokenContract) getTokenInfo();\n\n    if (rpcProvider) {\n      getContract(rpcProvider);\n      getPublicBalances();\n      if (signedProvider) {\n        //getUserBalances();\n      }\n    }\n  }, [rpcProvider, tokenContract, signedProvider]);\n\n  async function connectProvider() {\n    console.log(\"connecting to rpcProvider\");\n    let ethersProvider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');\n    //let ethersProvider = ethers.getDefaultProvider();\n    setRpcProvider(ethersProvider);\n  }\n\n  async function getTokenInfo() {\n    let supply = await tokenContract.totalSupply();\n    \n    console.log(ethers.utils.formatUnits(supply).toString());\n    //const newData = {...data, totalSupply: supply};\n\n    setData(prevData => ({...prevData, totalSupply:supply, tokenContract:tokenContract}));\n  }\n\n  async function getPublicBalances() {\n    console.log(\"getting public balances\");\n    const ethBalance = await rpcProvider.getBalance('0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266');\n    const oneCoinTreasuryBalance = await rpcProvider.getBalance(tokenJSON.address);\n    setData(prevData => ({...prevData, \n      ethBalance: ethBalance,\n      oneCoinTreasuryBalance: oneCoinTreasuryBalance}));\n  }\n\n  async function getUserBalances() {\n    console.log(\"getting user balances\");\n    let accounts = await signedProvider.listAccounts();\n    const myEthBalance = await signedProvider.getBalance(accounts[0]);\n    const myONEBalance = await tokenContract.balanceOf(accounts[0]);\n    setData(prevData => ({...prevData,    \n      myEthBalance: myEthBalance, \n      myONEBalance: myONEBalance,\n    }));\n  }\n\n  function formatEth(bn) {\n    return parseFloat(ethers.utils.formatUnits(bn).toString()).toLocaleString('en-US',{minimumFractionDigits:4,maximumFractionDigits:6});\n  }\n\n  async function mint(num) {\n    console.log(\"mint here. %s tokens\", num);\n    let tokenContractWithSigner = await tokenContract.connect(signedProvider.getSigner());\n\n    let tx = await tokenContractWithSigner.buyCoins({value: ethers.utils.parseEther(num.toString())});\n    let receipt = await tx.wait();\n    console.log(receipt);\n  }\n\n  function mintButton() {\n    return signedProvider ? (\n      <button\n        className='btn-gradient-border btn'\n        onClick ={() => {\n          mint(.001); \n        }}\n          >\n          Mint 1 ETH worth of OneCoin\n      </button>\n    ) : null;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={process.env.PUBLIC_URL + '/flatecoin.png'} className=\"App-logo\" alt=\"logo\" />\n        <h1 className='text-gradient'>Welcome to Inflation Coin</h1>\n        <p>\n          Inflation Coin is an experiment. We start with a single coin in circulation, and every day each coins splits into 2\n        </p>\n        <p>\n          Total Supply: {data.totalSupply != null ? formatEth(data.totalSupply) : 'loading'} FLATE\n        </p>\n        <button className=\"btn btn-gradient-border\"\n          onClick={(e) => window.open('https://poocoin.app/tokens/'+tokenJSON.address, '_blank')} > \n          See the Price\n        </button>\n        <button \n          className=\"btn btn-gradient-border\"\n          onClick={(e) => window.open('https://pancakeswap.finance/swap?outputCurrency='+tokenJSON.address, '_blank')}>\n            Invest in FLATE\n        </button>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}